<div class="container">
  <%#=@booking.total_price %>
<div id="cardPaymentBrick_container">
</div>
<script>

    const mp = new MercadoPago('TEST-9d59bacb-fcfc-4040-95b3-5a5e6a2f5a70', {
        locale: 'es-AR'
    });
    const bricksBuilder = mp.bricks();
    const renderCardPaymentBrick = async (bricksBuilder) => {
        const settings = {
            initialization: {
                amount: <%=@booking.total_price %>, // monto a ser pago
                payer: {
                    email: "patricio@flyoner.me",
                },
            },
            customization: {
                maxInstallments: 3,
                visual: {
                    style: {
                        theme: 'flat', // | 'dark' | 'bootstrap' | 'flat'
                    }
                },
            },
            callbacks: {
                onReady: () => {
                    // callback llamado cuando Brick esté listo
                },
                onSubmit: (cardFormData) => {
                    //  callback llamado cuando el usuario haga clic en el botón enviar los datos
                    //  ejemplo de envío de los datos recolectados por el Brick a su servidor
                    return new Promise((resolve, reject) => {
                        fetch("/process_payment", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                            },
                            body: JSON.stringify(cardFormData)
                        })
                          .then((response) => {
                              // recibir el resultado del pago
                              //console.log(response);
                              window.location.href = response.url;
                              resolve();
                          })
                          .catch((error) => {
                              // tratar respuesta de error al intentar crear el pago
                              reject();
                          })
                    });
                },
                onError: (error) => {
                    // callback llamado para todos los casos de error de Brick
                },
            },
        };
        window.cardPaymentBrickController = await bricksBuilder.create('cardPayment', 'cardPaymentBrick_container', settings);
    };
    renderCardPaymentBrick(bricksBuilder);


</script>
</div>
